import tensorflow as tf 
import numpy as np
from tensorflow.keras.preprocessing import image
from gpt4all import GPT4All  


model = tf.keras.models.load_model("pest_disease_recognition.h5")


class_labels = [
    "Disease_Early Blight", 
    "Disease_Leaf Mold", "Pest_Aphids",
    "Pest_Corn Earworms", "Pest_Spider Mites"]

solution_model = GPT4All("mistral-7b-instruct-v0.1.Q4_0.gguf")



def preprocess_image(img_path):
    img = image.load_img(img_path, target_size=(150, 150))
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)
    return img_array


def user_prompt_for(disease_name):
    return f"""
рдЖрдк рдПрдХ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рдХреГрд╖рд┐ рд╕рд╣рд╛рдпрдХ рд╣реИрдВ рдЬреЛ '{disease_name}' рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдЬрд╛рдирдХрд╛рд░реА рдкреНрд░рджрд╛рди рдХрд░ рд░рд╣реЗ рд╣реИрдВред

рдЖрдкрдХрд╛ рдЙрддреНрддрд░ рдирд┐рдореНрдирд▓рд┐рдЦрд┐рдд рд╕рдВрд░рдЪрдирд╛ рдореЗрдВ рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП рдФрд░ рд╣рд┐рдВрджреА рдореЗрдВ рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП:

# {disease_name}

**рд╡реИрдЬреНрдЮрд╛рдирд┐рдХ рдирд╛рдо:** *[рд╡реИрдЬреНрдЮрд╛рдирд┐рдХ рдирд╛рдо]*  
**рд╕рд╛рдорд╛рдиреНрдп рдирд╛рдо:** [рд╕рд╛рдорд╛рдиреНрдп рдирд╛рдореЛрдВ рдХреА рд╕реВрдЪреА]  

## ЁЯМ▒ рд╡рд┐рд╡рд░рдг  
[рд░реЛрдЧ рдпрд╛ рдХреАрдЯ рдХрд╛ рд╕рдВрдХреНрд╖рд┐рдкреНрдд рд╡рд┐рд╡рд░рдг рджреЗрдВ]  

## ЁЯФН рдХрд╛рд░рдг рдФрд░ рд▓рдХреНрд╖рдг  
- рдХрд╛рд░рдг: [рдХрд╛рд░рдгреЛрдВ рдХреА рд╕реВрдЪреА рджреЗрдВ]  
- рд▓рдХреНрд╖рдг: [рд▓рдХреНрд╖рдгреЛрдВ рдХреА рд╕реВрдЪреА рджреЗрдВ]  

## ЁЯТК рдЙрдкрдЪрд╛рд░ рдФрд░ рд╕рдорд╛рдзрд╛рди  
- рдЕрдиреБрд╢рдВрд╕рд┐рдд рдЙрдкрдЪрд╛рд░: [рджрд╡рд╛рдУрдВ рдпрд╛ рдЙрдкрд╛рдпреЛрдВ рдХреА рд╕реВрдЪреА рджреЗрдВ]  
- рдШрд░реЗрд▓реВ рдЙрдкрдЪрд╛рд░: [рдкреНрд░рд╛рдХреГрддрд┐рдХ рдЙрдкрдЪрд╛рд░ рдкреНрд░рджрд╛рди рдХрд░реЗрдВ рдпрджрд┐ рд▓рд╛рдЧреВ рд╣реЛ]  

## ЁЯЫбя╕П рд░реЛрдХрдерд╛рдо рдХреЗ рдЙрдкрд╛рдп  
- [рдЗрд╕ рд╕рдорд╕реНрдпрд╛ рд╕реЗ рдмрдЪрдиреЗ рдХреЗ рд╕рд░реНрд╡реЛрддреНрддрдо рддрд░реАрдХреЗ рдкреНрд░рджрд╛рди рдХрд░реЗрдВ]  

## ЁЯУЪ рдЕрддрд┐рд░рд┐рдХреНрдд рдЬрд╛рдирдХрд╛рд░реА  
- [рдХреЛрдИ рдЕрдиреНрдп рдЙрдкрдпреЛрдЧреА рд╡рд┐рд╡рд░рдг рдпрд╛ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╕рд▓рд╛рд╣]  
    """


def get_solution(pest_or_disease):
   
    system_prompt = f"""
рдЖрдк рдПрдХ рдХреГрд╖рд┐ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╣реИрдВ рдЬреЛ рдкреМрдзреЛрдВ рдХреЗ рд╕реНрд╡рд╛рд╕реНрдереНрдп рдореЗрдВ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮрддрд╛ рд░рдЦрддреЗ рд╣реИрдВред 
рдЖрдкрдХрд╛ рдХрд╛рд░реНрдп '{pest_or_disease}' рдХреЗ рд▓рд┐рдП рдПрдХ рд╕рдЯреАрдХ, рд╕рдВрд░рдЪрд┐рдд рдФрд░ рд╡реИрдЬреНрдЮрд╛рдирд┐рдХ рд╕рдорд╛рдзрд╛рди рд╣рд┐рдВрджреА рдореЗрдВ рдкреНрд░рджрд╛рди рдХрд░рдирд╛ рд╣реИред
"""

    
    user_prompt = user_prompt_for(pest_or_disease)


    final_prompt = system_prompt + "\n\n" + user_prompt

    response = solution_model.generate(final_prompt, max_tokens=500)
    return response



def predict_and_suggest_solution(img_path):
    img_array = preprocess_image(img_path)
    prediction = model.predict(img_array)
    predicted_class = class_labels[np.argmax(prediction)]
    
    print(f"\nЁЯФН **рдкрд╣рдЪрд╛рдирд╛ рдЧрдпрд╛ рд╕рдорд╕реНрдпрд╛:** {predicted_class}")
    solution = get_solution(predicted_class)
    
    print("\nЁЯТб **рд╕реБрдЭрд╛рдпрд╛ рдЧрдпрд╛ рд╕рдорд╛рдзрд╛рди:**")
    print(solution)



image_path = r"C:\Users\Ayesha\Downloads\spider-mite-tetranychidae-640x480.jpg"
predict_and_suggest_solution(image_path)
